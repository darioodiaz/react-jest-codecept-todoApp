/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/home/dario/Desktop/todoApp/src/components/Container/TodoList/NewTodoItem/NewTodoItem.js';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

NewTodoItem = function (_Component) {_inherits(NewTodoItem, _Component);
  function /* istanbul ignore next */NewTodoItem(props) {/* istanbul ignore next */_classCallCheck(this, NewTodoItem);var _this = _possibleConstructorReturn(this, (NewTodoItem.__proto__ || Object.getPrototypeOf(NewTodoItem)).call(this,
    props));
    /* istanbul ignore next */_this.state = {
      todo: '' };

    /* istanbul ignore next */_this.onChange = /* istanbul ignore next */_this.onChange.bind( /* istanbul ignore next */_this); /* istanbul ignore next */return _this;
  }_createClass(NewTodoItem, [{ key: 'clear', value: function clear()
    {
      this.setState({ todo: '' });
    } }, { key: 'onChange', value: function onChange(
    event) {
      this.setState({ todo: event.currentTarget.value });
      this.props.onNewTodo(this.state.todo);
    } }, { key: 'render', value: function render()

    {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'todo-item', __source: { fileName: _jsxFileName, lineNumber: 21 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ name: 'txt-new-todo', type: 'text', onChange: this.onChange, value: this.state.todo, __source: { fileName: _jsxFileName, lineNumber: 22 }, __self: this })));


    } }]);return NewTodoItem;}(_react.Component);

NewTodoItem.propTypes = {
  onNewTodo: /* istanbul ignore next */_react.PropTypes.func.isRequired }; /* istanbul ignore next */exports.default =


NewTodoItem;